<?php

class FileScanner {

	// Directory to be scanned. can be combined to pass more than one directory
	protected $dirList = [];

	// Administrator E-mail to report when found something wrong
	protected $adminEmail = [];

	// Directory where is stored malware codes to be removed from files
	protected $malwareDirList = [];

	// File to log results found
	protected $logPath = "";

	// Auto clear files
	protected $autoClear = false;

	// Seek recursively
	protected $isRecursive = false;

	// File extensions to scan
	protected $fileTypesToScan = null;

	// File extensions to ignore
	protected $fileTypesToIgnore = null;

	protected $dateRunning = null ;

	public function __construct ( Array $dirList ) {
		$this->dirList = $dirList;
		$this->dateRunning = date("Y-m-d_H-i") ;
	}

	public function setDirList ( $dirList ) {
		$this->dirList = $dirList ;
		return $this;
	}

	public function getDirList ( ) {
		return $this->dirList ;
	}

	public function setAdminEmail ( $adminEmail ) {
		$this->adminEmail = $adminEmail ;
		return $this;
	}

	public function getAdminEmail ( ) {
		return $this->adminEmail ;
	}

	public function setMalwareDirList ( $malwareDirList ) {
		$this->malwareDirList = $malwareDirList ;
		return $this;
	}

	public function getMalwareDirList ( ) {
		return $this->malwareDirList ;
	}

	public function setLogPath ( $logPath ) {
		$this->logPath = $logPath ;
		return $this;
	}

	public function getLogPath ( ) {
		return $this->logPath ;
	}

	public function setAutoClear ( $autoClear ) {
		$this->autoClear = $autoClear ;
		return $this;
	}

	public function isAutoClear ( ) {
		return $this->autoClear ;
	}

	public function setFileTypesToScan ( $fileTypesToScan ) {
		$this->fileTypesToScan = $fileTypesToScan ;
		return $this ;
	}

	public function getFileTypesToScan ( ) {
		return $this->fileTypesToScan;
	}

	public function setFileTypesToIgnore ( $fileTypesToIgnore ) {
		$this->fileTypesToIgnore = $fileTypesToIgnore ;
		return $this ;
	}

	public function getFileTypesToIgnore ( ) {
		return $this->fileTypesToIgnore;
	}

	public function setRecursive ( $isRecursive ) {
		$this->isRecursive = $isRecursive;
		return $this;
	}

	public function isRecursive ( ) {
		return $this->isRecursive;
	}

	public function scanFileList ( $fileList ) {

		$malwareList = $this->getMalwareList();

		// 1024 * 1024 = 1.048.576
		$fp = fopen( $fileList , "r+" );
		while ($fileToScan = stream_get_line ( $fp, 1048576 , "\n") ) {
			// echo "lets scan $fileToScan";
			$this->scanFile ( $fileToScan , $malwareList );
		}

		fclose($fp);

	}

	private function getMalwareList ( ) {

		$malwareList = [];
		foreach ( $this->malwareDirList as $malwareDir ) {
			$files = scandir( $malwareDir );	
			foreach ( $files as $file ) {
				if ( !$fileName = realpath ( $malwareDir . DIRECTORY_SEPARATOR . $file ) ) continue ;
				if ( !is_file($fileName) ) continue ;
				if ( substr($file, 0,1) == '.' ) continue ;
				// $malwareList[] = $fileName;
				$malwareSource = file_get_contents($fileName);
				$malwareList[md5($malwareSource)] = $malwareSource;
			}
		}

		return $malwareList;

	}

	public function scanDir ( $dir ) {

		$malwareList = $this->getMalwareList();

		$fileList = $this->getFileList ( $dir );

		// 1024 * 1024 = 1.048.576
		$fp = fopen( $fileList , "r+" );
		while ($fileToScan = stream_get_line ( $fp, 1048576 , "\n") ) {
			// echo "lets scan $fileToScan";
			$this->scanFile ( $fileToScan , $malwareList );
		}

		fclose($fp);

	}

	private function scanFile ( $fileToScan , &$malwareList ) {

		println ("SCANNING FILE $fileToScan ...");

		foreach ( $malwareList as $malwareHash => $malwareSource ) {

			$fp = fopen( $fileToScan , "r+" );
			$bytesToClear = 0 ;
			$infected = false ;

			println("Malware with " . strlen($malwareSource) . " bytes ");
			$fileSource = fread ( $fp, strlen($malwareSource) );
			println("================ FILE READED ===============\n");

			if ( md5($fileSource) == $malwareHash ) {
				$infected = true ;
				$bytesToClear = strlen($malwareSource);
				println("malware found!");
				println($fileSource);
			}

			fclose($fp);

			if ( $infected ) {
				$status = "infected";
				if ( AUTO_CLEAR ) {
					$status .= " auto_clear";
					try {
						if ( !$this->clearFile ( $fileToScan , $bytesToClear ) ) throw new Exception("unknown error", 1);
						$status .= " OK";
					} catch (Exception $e) {
						$status .= " FAIL (".$e->getMessage().")";
					}
				}
				$this->logToFile ( $fileToScan , $status );
			}

		}

		var_dump($fileToScan);

	}

	private function clearFile ( $fileName , $bytesToClear ) {

		$pathinfo = pathinfo($fileName);
		if ( empty ( $pathinfo['extension'] ) ) $pathinfo['extension'] = "";

		$quarentainePath = $pathinfo['dirname'] . DIRECTORY_SEPARATOR . "_quarentaine_" ;
		if ( !is_dir ( $quarentainePath ) ) {
			mkdir ( $quarentainePath ) ;
		}
		
		$quarentaineFile = $quarentainePath . DIRECTORY_SEPARATOR . $pathinfo['basename'] ;

		$i = 1;
		while(file_exists($quarentaineFile)) {           
			$quarentaineFile = $quarentainePath . DIRECTORY_SEPARATOR . $pathinfo['filename'] . "-" . $i++ . $pathinfo['extension'] ;
		}

		if ( !rename( $fileName , $quarentaineFile ) ) {
			throw new Exception("Error trying to move file to quarentaine", 1);
		}

		$fp = fopen( $quarentaineFile , "r+" );
		$dispose = fread ( $fp, $bytesToClear );
		println("==========================================");
		println("BYTES TO CLEAR: => ".$dispose);
		println("==========================================");

		if ( !$newFileFp = fopen( $fileName , "w" ) ) throw new Exception("Error trying to recreate file", 1);
		while ( $bytesToSave = fread ( $fp , 1024 * 1024 ) ) {
			fwrite($newFileFp, $bytesToSave);
		}
		
		fclose($fp);
		fclose($newFileFp);

		return true ;

	}

	private function logToFile ( $fileName , $status ) {
		$logFile = $this->logPath . DIRECTORY_SEPARATOR . $this->dateRunning . ".log" ;
		$txt = $fileName . " - " . $status ;
 		file_put_contents($logFile, $txt.PHP_EOL , FILE_APPEND | LOCK_EX);
	}

	private function getFileList ( $dir ) {
		
		try {
		
			$filesToScan_filename = $this->logPath . DIRECTORY_SEPARATOR . "files_to_scan-".md5($dir).".txt" ;
			if ( is_file ( $filesToScan_filename ) ) {
				unlink ( $filesToScan_filename ) ;
			}

			$filesToScanFile = fopen( $filesToScan_filename , "w" ) or die("Unable to write log file!");
			$this->getDirContents ( $dir , $filesToScanFile , $this->isRecursive() ) ;

		} catch (Exception $e) {
			die($e->getMessage());
		} finally {
			fclose($filesToScanFile);
			println ("\narquivo fechado.");
		}

		return $filesToScan_filename ;

	}

	private function getDirContents ( $dir , $filesToScanFile , $recursive = false ) {
		
		$files = scandir( $dir );

		foreach ( $files as $file ) {
			
			if ( $file == "." || $file == ".." ) continue ; 

			$path = realpath ( $dir . DIRECTORY_SEPARATOR . $file );

			if ( !is_dir($path) ) {
				$pathInfo = pathinfo($path);
				if ( !isset($pathInfo['extension'] ) ) $pathInfo['extension'] = "" ;
				if ( in_array ( $pathInfo['extension'] , $this->fileTypesToIgnore ) ) continue;
				if ( empty ( $this->fileTypesToScan ) || in_array ( $pathInfo['extension'] , $this->fileTypesToScan ) || ( $pathInfo['extension'] == "" && !IGNORE_EMPTY_EXTENSION ) )  {
					fwrite($filesToScanFile, $path."\n");
				}
			} else if ( $recursive ) {
				$this->getDirContents ( $path , $filesToScanFile , $recursive );
			}

		}

	}



}



?>